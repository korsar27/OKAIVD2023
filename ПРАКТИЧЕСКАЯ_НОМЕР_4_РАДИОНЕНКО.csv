{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "x3XOvRYKhCCS",
        "outputId": "f61c61b4-a9b9-40aa-b594-978513c5fed5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "               date    unit_01    unit_02    unit_03    unit_04    unit_05  \\\n",
              "0        2022-01-01  39.713383  35.356841  29.501120  49.620615  33.370093   \n",
              "1        2022-01-02  37.112475  49.944375  42.270097  51.557284  40.549544   \n",
              "2        2022-01-03  39.713383  28.340224  48.018449  39.977347  39.209601   \n",
              "3        2022-01-04  50.000000  43.555570  36.278831  43.076333  40.549544   \n",
              "4        2022-01-05  42.434209  28.734675  35.919586  49.739334  37.639153   \n",
              "..              ...        ...        ...        ...        ...        ...   \n",
              "361      2022-12-28  36.922681  42.956541  37.757330  39.423959  40.549544   \n",
              "362      2022-12-29  39.835742  30.958749  41.143042  46.283822  40.549544   \n",
              "363      2022-12-30  34.484518  36.817061  26.891212  40.649628  34.485905   \n",
              "364      2022-12-31  28.044285  38.053724  50.317334  46.277700  44.742887   \n",
              "365  average_annual  39.713383  39.598905  40.309659  39.977347  40.549544   \n",
              "\n",
              "       unit_06    unit_07    unit_08    unit_09    unit_10        min  \\\n",
              "0    38.610154  34.559279  53.436849  41.238733  58.494774  29.501120   \n",
              "1    37.078793  22.265877  45.772941  75.733055  53.659106  22.265877   \n",
              "2    46.690520  25.886239  31.383527  78.607074  60.231050  25.886239   \n",
              "3    35.764313  59.110809  49.864199  39.244188  66.407508  35.764313   \n",
              "4    39.931516  15.093752  50.664648  48.536941  65.719188  15.093752   \n",
              "..         ...        ...        ...        ...        ...        ...   \n",
              "361  42.500627  47.705860  30.529000  46.644630  60.888610  30.529000   \n",
              "362  35.878442  64.125878  52.910647  76.109909  65.518039  30.958749   \n",
              "363  39.078600  60.788903  48.904611  66.273623  67.848695  26.891212   \n",
              "364  35.568732  69.927246  56.475326  73.268611  63.756814  28.044285   \n",
              "365  39.931516  37.464036  49.864199  55.345836  60.231050  28.343891   \n",
              "\n",
              "        median        max     mean/std  \n",
              "0    39.161769  58.494774   41.39/9.46  \n",
              "1    44.021519  75.733055  45.59/13.96  \n",
              "2    39.845365  78.607074   43.81/15.9  \n",
              "3    43.315951  66.407508  46.39/10.04  \n",
              "4    41.182863  65.719188  41.44/13.73  \n",
              "..         ...        ...          ...  \n",
              "361  41.525086  60.888610   42.59/8.12  \n",
              "362  43.713432  76.109909  49.33/14.81  \n",
              "363  39.864114  67.848695  45.62/14.55  \n",
              "364  48.297517  73.268611  50.64/15.06  \n",
              "365  41.811193  65.371048          NaN  \n",
              "\n",
              "[366 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2aef5f37-e63e-4423-85ab-0c9f02b5df31\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>unit_01</th>\n",
              "      <th>unit_02</th>\n",
              "      <th>unit_03</th>\n",
              "      <th>unit_04</th>\n",
              "      <th>unit_05</th>\n",
              "      <th>unit_06</th>\n",
              "      <th>unit_07</th>\n",
              "      <th>unit_08</th>\n",
              "      <th>unit_09</th>\n",
              "      <th>unit_10</th>\n",
              "      <th>min</th>\n",
              "      <th>median</th>\n",
              "      <th>max</th>\n",
              "      <th>mean/std</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>39.713383</td>\n",
              "      <td>35.356841</td>\n",
              "      <td>29.501120</td>\n",
              "      <td>49.620615</td>\n",
              "      <td>33.370093</td>\n",
              "      <td>38.610154</td>\n",
              "      <td>34.559279</td>\n",
              "      <td>53.436849</td>\n",
              "      <td>41.238733</td>\n",
              "      <td>58.494774</td>\n",
              "      <td>29.501120</td>\n",
              "      <td>39.161769</td>\n",
              "      <td>58.494774</td>\n",
              "      <td>41.39/9.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-01-02</td>\n",
              "      <td>37.112475</td>\n",
              "      <td>49.944375</td>\n",
              "      <td>42.270097</td>\n",
              "      <td>51.557284</td>\n",
              "      <td>40.549544</td>\n",
              "      <td>37.078793</td>\n",
              "      <td>22.265877</td>\n",
              "      <td>45.772941</td>\n",
              "      <td>75.733055</td>\n",
              "      <td>53.659106</td>\n",
              "      <td>22.265877</td>\n",
              "      <td>44.021519</td>\n",
              "      <td>75.733055</td>\n",
              "      <td>45.59/13.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-01-03</td>\n",
              "      <td>39.713383</td>\n",
              "      <td>28.340224</td>\n",
              "      <td>48.018449</td>\n",
              "      <td>39.977347</td>\n",
              "      <td>39.209601</td>\n",
              "      <td>46.690520</td>\n",
              "      <td>25.886239</td>\n",
              "      <td>31.383527</td>\n",
              "      <td>78.607074</td>\n",
              "      <td>60.231050</td>\n",
              "      <td>25.886239</td>\n",
              "      <td>39.845365</td>\n",
              "      <td>78.607074</td>\n",
              "      <td>43.81/15.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-01-04</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>43.555570</td>\n",
              "      <td>36.278831</td>\n",
              "      <td>43.076333</td>\n",
              "      <td>40.549544</td>\n",
              "      <td>35.764313</td>\n",
              "      <td>59.110809</td>\n",
              "      <td>49.864199</td>\n",
              "      <td>39.244188</td>\n",
              "      <td>66.407508</td>\n",
              "      <td>35.764313</td>\n",
              "      <td>43.315951</td>\n",
              "      <td>66.407508</td>\n",
              "      <td>46.39/10.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-01-05</td>\n",
              "      <td>42.434209</td>\n",
              "      <td>28.734675</td>\n",
              "      <td>35.919586</td>\n",
              "      <td>49.739334</td>\n",
              "      <td>37.639153</td>\n",
              "      <td>39.931516</td>\n",
              "      <td>15.093752</td>\n",
              "      <td>50.664648</td>\n",
              "      <td>48.536941</td>\n",
              "      <td>65.719188</td>\n",
              "      <td>15.093752</td>\n",
              "      <td>41.182863</td>\n",
              "      <td>65.719188</td>\n",
              "      <td>41.44/13.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>361</th>\n",
              "      <td>2022-12-28</td>\n",
              "      <td>36.922681</td>\n",
              "      <td>42.956541</td>\n",
              "      <td>37.757330</td>\n",
              "      <td>39.423959</td>\n",
              "      <td>40.549544</td>\n",
              "      <td>42.500627</td>\n",
              "      <td>47.705860</td>\n",
              "      <td>30.529000</td>\n",
              "      <td>46.644630</td>\n",
              "      <td>60.888610</td>\n",
              "      <td>30.529000</td>\n",
              "      <td>41.525086</td>\n",
              "      <td>60.888610</td>\n",
              "      <td>42.59/8.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>2022-12-29</td>\n",
              "      <td>39.835742</td>\n",
              "      <td>30.958749</td>\n",
              "      <td>41.143042</td>\n",
              "      <td>46.283822</td>\n",
              "      <td>40.549544</td>\n",
              "      <td>35.878442</td>\n",
              "      <td>64.125878</td>\n",
              "      <td>52.910647</td>\n",
              "      <td>76.109909</td>\n",
              "      <td>65.518039</td>\n",
              "      <td>30.958749</td>\n",
              "      <td>43.713432</td>\n",
              "      <td>76.109909</td>\n",
              "      <td>49.33/14.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363</th>\n",
              "      <td>2022-12-30</td>\n",
              "      <td>34.484518</td>\n",
              "      <td>36.817061</td>\n",
              "      <td>26.891212</td>\n",
              "      <td>40.649628</td>\n",
              "      <td>34.485905</td>\n",
              "      <td>39.078600</td>\n",
              "      <td>60.788903</td>\n",
              "      <td>48.904611</td>\n",
              "      <td>66.273623</td>\n",
              "      <td>67.848695</td>\n",
              "      <td>26.891212</td>\n",
              "      <td>39.864114</td>\n",
              "      <td>67.848695</td>\n",
              "      <td>45.62/14.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>364</th>\n",
              "      <td>2022-12-31</td>\n",
              "      <td>28.044285</td>\n",
              "      <td>38.053724</td>\n",
              "      <td>50.317334</td>\n",
              "      <td>46.277700</td>\n",
              "      <td>44.742887</td>\n",
              "      <td>35.568732</td>\n",
              "      <td>69.927246</td>\n",
              "      <td>56.475326</td>\n",
              "      <td>73.268611</td>\n",
              "      <td>63.756814</td>\n",
              "      <td>28.044285</td>\n",
              "      <td>48.297517</td>\n",
              "      <td>73.268611</td>\n",
              "      <td>50.64/15.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>365</th>\n",
              "      <td>average_annual</td>\n",
              "      <td>39.713383</td>\n",
              "      <td>39.598905</td>\n",
              "      <td>40.309659</td>\n",
              "      <td>39.977347</td>\n",
              "      <td>40.549544</td>\n",
              "      <td>39.931516</td>\n",
              "      <td>37.464036</td>\n",
              "      <td>49.864199</td>\n",
              "      <td>55.345836</td>\n",
              "      <td>60.231050</td>\n",
              "      <td>28.343891</td>\n",
              "      <td>41.811193</td>\n",
              "      <td>65.371048</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>366 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2aef5f37-e63e-4423-85ab-0c9f02b5df31')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2aef5f37-e63e-4423-85ab-0c9f02b5df31 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2aef5f37-e63e-4423-85ab-0c9f02b5df31');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-10cedf8b-c0f8-47e9-9d8d-cecb507332a6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-10cedf8b-c0f8-47e9-9d8d-cecb507332a6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-10cedf8b-c0f8-47e9-9d8d-cecb507332a6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "file_csv",
              "summary": "{\n  \"name\": \"file_csv\",\n  \"rows\": 366,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 366,\n        \"samples\": [\n          \"2022-07-13\",\n          \"2022-02-03\",\n          \"2022-01-16\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_01\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.453866674656148,\n        \"min\": 26.454867484735,\n        \"max\": 50.0,\n        \"num_unique_values\": 322,\n        \"samples\": [\n          49.47623620437871,\n          33.564504152809654,\n          42.55842488467356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_02\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.006941671091797,\n        \"min\": 27.522414149036784,\n        \"max\": 53.5940922775519,\n        \"num_unique_values\": 322,\n        \"samples\": [\n          48.17293430126053,\n          31.685853067514195,\n          29.197590062802803\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_03\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.940665301423394,\n        \"min\": 23.722101537858183,\n        \"max\": 51.787829265483246,\n        \"num_unique_values\": 330,\n        \"samples\": [\n          47.15084664670778,\n          39.71575189523995,\n          41.286347245599664\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_04\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.585578115869694,\n        \"min\": 26.341233750852503,\n        \"max\": 56.09265126286748,\n        \"num_unique_values\": 331,\n        \"samples\": [\n          28.523829963343157,\n          38.78865074482753,\n          39.68198824413077\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_05\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.863660106555576,\n        \"min\": 24.68551730658107,\n        \"max\": 55.08799912009238,\n        \"num_unique_values\": 330,\n        \"samples\": [\n          46.3420109522913,\n          41.64377546293237,\n          39.28200550160135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_06\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.345125469179759,\n        \"min\": 28.28098309962155,\n        \"max\": 54.28163407551962,\n        \"num_unique_values\": 322,\n        \"samples\": [\n          40.96442448178295,\n          41.09777513985263,\n          37.01635631499408\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_07\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.36450934999077,\n        \"min\": 10.261938777025057,\n        \"max\": 69.92724596901596,\n        \"num_unique_values\": 328,\n        \"samples\": [\n          22.26903955366126,\n          26.370536312568017,\n          69.64940042151683\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_08\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.974310746059139,\n        \"min\": 30.02514209346126,\n        \"max\": 69.5740833988664,\n        \"num_unique_values\": 326,\n        \"samples\": [\n          32.426777510981005,\n          62.07028750184969,\n          43.992529586339785\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_09\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.62338377463422,\n        \"min\": 30.164278788899423,\n        \"max\": 79.7841739903176,\n        \"num_unique_values\": 325,\n        \"samples\": [\n          62.41757653123452,\n          37.07317349069655,\n          79.30812516561784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unit_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.611713645681997,\n        \"min\": 50.05528524884463,\n        \"max\": 69.7978573781138,\n        \"num_unique_values\": 342,\n        \"samples\": [\n          63.15164655799792,\n          65.87850616140769,\n          56.92201145112338\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.453282631561222,\n        \"min\": 10.261938777025057,\n        \"max\": 40.09966031888566,\n        \"num_unique_values\": 366,\n        \"samples\": [\n          33.682000728227536,\n          20.74204898978667,\n          37.44162219420171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"median\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.423942039620327,\n        \"min\": 35.091441434824546,\n        \"max\": 49.37074883645083,\n        \"num_unique_values\": 361,\n        \"samples\": [\n          42.857453769254896,\n          40.40925642507389,\n          43.5903794603493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.5719321274651135,\n        \"min\": 50.600001771078205,\n        \"max\": 79.7841739903176,\n        \"num_unique_values\": 355,\n        \"samples\": [\n          67.140896358916,\n          63.69347330086265,\n          65.01325304023257\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean/std\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 365,\n        \"samples\": [\n          \"45.84/8.38\",\n          \"41.79/13.6\",\n          \"47.41/10.1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "file_csv = pd.read_csv(\"https://raw.githubusercontent.com/EvgeniiSopovGitHub/datasets_uni/main/okaivd/lab_4_raw_data.csv\", sep=';')\n",
        "\n",
        "\n",
        "kol_vo_stolbcov = file_csv.shape[1] # нащшёл общее колдичество столбцов (знаю что их 11 но просто на будущее если бы я не зна лсколько их то икал бы их так)\n",
        "\n",
        "kol_vo_stolbcov\n",
        "\n",
        "#for column in range(1, kol_vo_stolbcov - 1):\n",
        "  #sr_znch =file_csv[column].mean()\n",
        "  #file_csv[column]=file_csv[column].fillna(sr_znch) ДУМАЛ ЧТО СРАБОТАЕТ, НО ПОЧЕМУ-ТО НЕТ)))))\n",
        "\n",
        "file_csv[file_csv.columns[1:kol_vo_stolbcov]] = file_csv[file_csv.columns[1:kol_vo_stolbcov]].fillna(file_csv[file_csv.columns[1:kol_vo_stolbcov]].mean()) # ЗДЕСЬ Я ПОДСТАВЛЯЮ ПРИ ПОМОЩИ КОМАНДЫ fillna СРЕДНИЕ ЗНАЧЕНИЯ КАЖДОГО ИЗ СТОЛБЦОВ В ПУСТЫЕ ЯЧЕЙКИ ЭТИХ ЖЕ СТОЛБЦОЫ ГДЕ Я БРАЛ СР ЗНАЧЕНИЕ (СТОЛБЕЗ ДЛЯ ПОИСКА ЗНАЧЕНИЯ Я ВЫДЕЛЯЛ С ПОМОЩЬЮ КОМАНДЫ (фунция[функция.columns[номер первого столбца, номер последнего столбца]]))\n",
        "\n",
        "\n",
        "new_column_names=[\"min\", 'median', 'max'] # создаю отдельыне столбцы min median max\n",
        "\n",
        "file_csv[new_column_names[0]]=file_csv.iloc[:, 1:kol_vo_stolbcov].min(axis=1) #здесь я нахожу минимальное значение строки (а значение это нахожу при помощи команды iloc[], которая выбирает значения из ячейки по фиксированным столбцам и не фиксированным строкам) и записываю мин\n",
        "file_csv[new_column_names[1]]=file_csv.iloc[:, 1:kol_vo_stolbcov].median(axis=1) ##здесь я нахожу минимальное значение строки (а значение это нахожу при помощи команды iloc[], которая выбирает значения из ячейки по фиксированным столбцам и не фиксированным строкам) и записываю mediana\n",
        "file_csv[new_column_names[2]]=file_csv.iloc[:, 1:kol_vo_stolbcov].max(axis=1) ##здесь я нахожу минимальное значение строки (а значение это нахожу при помощи команды iloc[], которая выбирает значения из ячейки по фиксированным столбцам и не фиксированным строкам) и записываю макс\n",
        "file_csv['mean/std'] = file_csv.iloc[:,1:11].mean(axis=1).round(2).astype(str) + '/' + file_csv.iloc[:,1:11].std(axis=1).round(2).astype(str) #здесь яч создал отдельный столбез для значений mean  (тоесть среднего по строке) / std (стандартное откланение) которые округлены до 2 знаков после запятой и их типо строковый (чтобы можно было написать /)\n",
        "\n",
        "\n",
        "\n",
        "average_annual=file_csv[file_csv.columns[1:kol_vo_stolbcov + 3]].mean() # вписал в каждую ячейку стобца ср значение столбца\n",
        "average_annual['date'] = 'average_annual' #создал строку с названием 'average_annual'\n",
        "file_csv.loc[len(file_csv)] = average_annual\n",
        "\n",
        "\n",
        "display(file_csv)\n",
        "\n",
        "\n"
      ]
    }
  ]
}